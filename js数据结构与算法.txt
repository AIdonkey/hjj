sort(compare)
迭代器方法
不生成数组迭代器的方法
forEach()对每一个函数使用一组值
function square(num)
{
  print(num,num*num);
}
var nums=[1,2,3,4,5,6,7,8,9,10]
every() 迭代器//返回布尔值
shift()删除数组第一个元素 返回删除后的数组的第一个元素
push() 向数组添加一个元素
3.列表：
空列表
listSize保存列表中的元素个数.append向列表末尾添加一个元素，insert可以在给定元素后或列表的起始位置添加一个元素，remove从列表删除指定元素，clear清空列表，toString()显示列表中的所有元素，getElement()方法显示当前元素。
4.栈
LIFO(后入先出)
push()入栈,pop()出栈但会删除栈顶元素,peek()只返回栈顶元素不删除它，
function Stack(){
	this.dataStore=[];//栈
	this.top=0;//元素的个数
	this.push=push;
	this.pop=pop;
	this.peek=peek;
}
function(element){
	this.dataStore[this.top++]=element;
}
function pop(){
	return this.dataStore[--this.top];
}
function peek(){
	return this.dataStore[this.pop-1];
}
4.3.1数制的相互转换
可以利用栈将一个数字从一种数制转换到另一种数制
转换算法如下：
1.最高位为n%b,将此位压入栈
2.使用n/b代替n.
3.重复步骤1和2，直到n等于0，且没有余数。
4.持续将栈内元素弹出，直到站为空
例子 比如 6转2进制 6%2=0先进栈，然后6/2=3 3换6 3%2=1进栈，3/2=1代替3 1%2=1进栈 1/2=0 弹出获得101 为二进制 只针对（2~9的基数）
function mulBase(num,Base){// 第一个为要转换的数，第二个为进制数
	var s=new Stack();
	do{
	s.push(num%base);
	num=Math.floor(num/=base);
	}while(num>0);
	var converted="";
	while(s.length()>0){
	converted+=s.pop();	
}
	return converted;
}
4.3.2 回文
回文是指一种现象，如一个单词无论从前往后写，还是从后往前写都一样
1001和dad，使用栈可以轻松判断是否为回文
//判断是否为回文
function isPalindRome(word){
	var s=new Stack();
	for(var i=0;i<word.length;i++){
	s.push(word[i]);
	
}    
     var rword="";
     while(s.length()>0){
	rword=s.pop();
	
}
if(word==rword){
	return true;
}
else{
	return false;
}	
}
4.3.3递归演示
使用栈来进行递归
function factorial(n){
	if(n===0){
	return 1;
}
else{
	return n*factorial(n-1);
}
}
function fact(n){
   var s=new Stack();
   while(n>1){
   s.push(n--);
   print(n);
}
   var product=1;
   while(s.length()>0){
	product*=s.pop();
}
   return product;
}
print(factorial(5));
print(fact(5));
5.队列
FIFO(First In Last Out)
插入操作叫入队，删除操作叫出队（删除队头元素），
peek()读取队头元素，length属性查看存储元素个数
clear()清空队列元素
push(）可以在数组末尾插入元素
shift()可以删除数组第一个元素
function Queue(){
	this.dataStore=[];
	this.enqueue=enqueue;
        this.dequeue=dequeue;
	this.front=front;
	this.back;
 	this.tostring;
	this.empty=empty;
}
function Patient(name,code){
	this.name=name;
	this.code=code;
}
function toString(){
	var retStr="";
	for(var i=0;i<this.dataStore.length;++i){
	retStr+=this.dataStore[i].name+" code:"+this.dataStore[i].code+"\n";
}
return retStr;
}
var p=new Patient("Smith",5);
var ed=new Queue();
ed.enqueue(p);
p=new Patient("Jones",4);
ed.enqueue(p);
p=new Patient("Febhrenbach",6);
ed.enqueue(p);
p=new Patient("Brown",1);
ed.enqueue(p);
p=new Patient("ingram",1);
ed.enqueue(p);
print(ed.toString());
var seen=ed.dequeue();
print("Patient being treated:"+seen[0].name);
print("Patient waitting to be seen:");
print(ed.toString());
var seen=ed.dequeue();
print("Patient being treated:"+seen[0].name);
print("Patients waiting to be seen:");
print(ed.toString());
splice(priority,1)//splice(start);splice(start,deleteCount);item1, item2, ... Optional
The elements to add to the array, beginning at the start index. If you don't specify any elements, splice() will only remove elements from the array.
6.链表
链表是由一组节点组成的集合，每一个节点都使用一个对象引用指向它的下一个节点的引用叫做链。
like: Milk->Bread->Eggs->Bacon->Null
链表头节点：链表的最前面Milk(Header)
将待删除元素的前驱节点指向待删除元素的后继节点，同时
将待删除元素指向 null，
6.3设计一个基于对象的链表
Node类用来表示节点，Linkedlist类提供了插入节点、删除节点、显示列表元素的方法
6.3.1Node类
function Node(element){
	this.element=element;	
	this.next=null;
}
6.3.2 LinkedList类
function LList(){
	this.head=new Node("head");
	this.find=find;
	this.insert=insert;
	this.remove=remove;
	this.display=display;
}
head节点的next属性被初始化为null，当有新的元素插入时，next会指向新的元素，所以我们没有修改next的值
6.3.3插入新节点
由于插入元素，先要找到"后面"的节点。创建辅助方法find();
function find(item){
	var currNode=this.head;
	while(currNode.element!=item){
	currNode=currNode.next;
}
return  currNode;

}
function insert(newElement,item){
	var newNode=new Node(newElement);
	var current=this.find(item);
	newNode.next=current.next;
	current.next=newNode;
}
function display(){
	var currNode=this.head;
	while(!(currNode.next)==null){
	print(currNode.next.element);
 	current=currNode.next;
}
var cities=new LList();
cities.insert("Conway","head");
cities.insert("Russellville","Conway");
cities.insert("Alma","Russellville");
cities.display();
6.3.4从列表删除一个节点
findPrevious(),
来做这件事
function findPrevious(item){
	var currNode=this.head;
	while(!(currNode.next==null)&&(currNode.next.element!=item)){
	currNode=currNode.next;
}
return currNode;
}
function remove(item){
	var prevNode=this.findPrevious(item);
	if(!(prevNode.next==null)){
	prevNode.next=prevNode.next.next;
}

}
function LList(){
	this.head=new Node("head");
	this.find=find;
	this.insert=insert;
	this.display=display;
	this.findPrevious=findPrevious;
	this.remove=remove;
}
var cities=new LList();
cities.insert("Conway")///
6.4 双向链表
为了方便从后遍历到前
function Node(element){
	this.element=element;
	this.next=null;
	this.previous=null;
}
function insert(newElement,item){
	var newNode=new Node(newElement);
	var currrent=this.find(item);
	newNode.next=current.next;
	newNode.previous=current;
	current.next=newNode;
}
function remove(item){
	var currNode=this.find(item);
	if(!(currNode.next==null)){
	currNode.previous.next=currNode.next;
	currNode.next.previous=currNode.previous;
	currNode.next=null;
	currNode.previous=null;
}}
function findLast(){
	var currNode=this.head;
	while(!(currNode.next==null)){
	currNode=currNode.next;
}
return currNode;

}
6.5循环链表
循环链表和单向链表
head.next=head;
function LList(){
	this.head=new Node("head");
	this.head.next=this.head;
	this.find=find;
	this.insert=insert;
	this.display=display;
	this.findPrevious=findPrevious;
	this.remove=remove;
}
7.字典
字典是一种以键-值对形式储存数据的数据结构
javascript的object类就是以字典的形式设计的

7.1 Dictionary
function Dictionary(){
	this.datastore=new Array();
}
function add(key,value){
	this.datastore[key]=value;
}
function find(key){
	return this.datastore[key];
}
function remove(key){
	delete this.datastore[key];
}
function showAll(){
	for(var key in Object.keys(this.datastore)){
	print(key+"->"+this.datastore[key]);
}

}
load("Dictionary.js");
var pbook=new Dictionary();
pbook.add("Mike","123");
pbook.add("David","345");
pbook.add("Cynthia","456");
print("David's extension:"+pbook.find("David"));
pbook.remove("David");
pbook.showAll();
7.2Dictionary类的辅助方法
function count(){
	var n=0;
	for(var key in Object.key(this.datastore)){
	++n;jish
}
return n;
}
var nums()=new Array();
nums[0]=1;
nums[1]=2;
print(nums.length);
var pbook=new Array();
pbook("David")=1;
pbook("Jennifer")=2;
8.散列
我们的散列
////
10.二叉树
function Node(data,left,right){
	this.data=data;
	this.left=left;	
	this.right=left;
	this.show=show;
}
function getMin(){
	var current=this.root;
	while(!(current.left==null)){
	current=current.left;
}
	return current.data;
}
function getMax(){
	var current=this.root;
	while(!(current.right==null)){
	current=currrent.right;
}
	return current.data;
}
function find(data){
	var current=this.root;
	while(current!==data){
	return current;
}
else if(data<current.data){
	current=current.left;
}
else if(data<current.data){
	current=current.left;
}
else{
	current=current.right;
}
return null;
}
funciton Node(data,left,right){
	this.data=data;
	this.count=1;
	this.left=left;
	this.right=right;
	this.show=show;
}
function update(data){
	var grade=this.find(data);
	grade.count++;
	return grade;
}
function prArray(arr){
	putstr(arr[0].toString()+'');
	for(var i=1;i<arr.length;++i){
	putstr(arr[i].toString()+'');
	if(i%10==0){
	putstr("\n");
}
}
}
function update(data){
	var grade=this.find(data);
	grade.count++;
	return grade;
}
function prArray(arr){
	putstr(arr[0].toString();++i);
	for(var i=1;i<arr.length;++i){}
}
11.tu
